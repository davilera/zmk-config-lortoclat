/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

/ {
    macros {
        ldots: ldots {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N2 &kp N6>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        femord: femord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mascord: mascord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ndash: ndash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N3>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mdash: mdash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N4>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        nbsp: nbsp {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp N0>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        dequot: dequot {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp E>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ldotl: ldotl {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp L &kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp N7>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_tap>,
                <&kp L>;
        };

        ograve: ograve {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp O>;
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp A>;
        };

        egrave: egrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp E>;
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(LS(N0)) &kp SPACE>;
        };

        oumlaut: oumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp O>;

            label = "OUMLAUT";
        };

        aumlaut: aumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp A>;

            label = "AUMLAUT";
        };

        ispace: macro_ispace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(I) &kp SPACE>;

            label = "MACRO_ISPACE";
        };

        iapos: iapos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(I) &kp APOS>;

            label = "IAPOS";
        };
    };

    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        isrt {
            bindings = <
&kp Y    &kp C     &kp L  &kp M      &kp K      &kp BSPC   &kp Z     &kp F  &kp U       &kp COMMA  &kp SQT
&kp I    &kp S     &kp R  &kp T      &kp G      &kp ENTER  &kp P     &kp N  &kp E       &kp A      &kp O
&kp Q    &kp V     &kp W  &kp D      &kp J      &kp ESC    &kp B     &kp H  &kp SLASH   &kp DOT    &kp X
&kp TAB  &kp LALT  &mo 3  &kp LCTRL  &kp SPACE             &kp LGUI  &mo 2  &kp LSHIFT  &mo 1      &mo 4
            >;
        };

        i18n {
            bindings = <
&kp RA(EXCL)   &kp RA(COMMA)  &ldotl        &kp RA(N5)    &kp RA(N9)  &none  &none  &kp RA(Y)  &kp RA(U)      &agrave    &kp RA(N0)
&kp RA(I)      &kp RA(S)      &kp RA(LBKT)  &kp RA(RBKT)  &none       &none  &none  &kp RA(N)  &kp RA(E)      &kp RA(A)  &kp RA(O)
&kp RA(J)      &dequot        &kp RA(LBRC)  &kp RA(RBRC)  &none       &none  &none  &egrave    &kp RA(SLASH)  &ldots     &ograve
&kp RA(GRAVE)  &kp RA(SQT)    &kp RA(DQT)   &none         &kp SPACE          &none  &none      &none          &none      &none
            >;
        };

        sym {
            bindings = <
&kp EXCL   &kp AT    &kp HASH   &kp DOLLAR  &kp PERCENT  &kp DEL  &kp CARET  &kp AMPS   &kp STAR      &kp LPAR   &kp RPAR
&kp COLON  &kp LT    &kp EQUAL  &kp GT      &kp PLUS     &kp DQT  &kp LEFT   &kp DOWN   &kp UP        &kp RIGHT  &kp SEMI
&kp LBKT   &kp RBKT  &kp BSLH   &kp PIPE    &kp UNDER    &none    &kp MINUS  &kp TILDE  &kp QUESTION  &kp LBRC   &kp RBRC
&kp GRAVE  &none     &none      &none       &none                 &none      &none      &none         &none      &none
            >;
        };

        num {
            bindings = <
&kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp RC(N5)  &trans  &kp UNDER  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp MINUS
&none       &none       &none       &kp LC(N0)  &none       &trans  &kp STAR   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp PLUS
&none       &none       &none       &none       &none       &trans  &kp SPACE  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp SLASH
&none       &none       &none       &none       &trans              &nbsp      &kp KP_N0  &kp DOT    &kp EQUAL  &none
            >;
        };

        fn {
            bindings = <
&sys_reset   &none  &none         &kp K_MUTE    &none       &kp C_SLEEP  &none  &none  &none  &none  &none
&none        &none  &kp C_VOL_UP  &kp C_VOL_DN  &none       &none        &none  &none  &none  &none  &none
&bootloader  &none  &none         &none         &none       &kp C_POWER  &none  &none  &none  &none  &none
&none        &none  &to 5         &to 0         &kp C_PLAY               &none  &none  &none  &none  &none
            >;
        };

        qwerty {
            bindings = <
&kp Q   &kp W   &kp E   &kp R   &kp T   &kp BSPC   &kp Y   &kp U   &kp I      &kp O    &kp P
&kp A   &kp S   &kp D   &kp F   &kp G   &kp ENTER  &kp H   &kp J   &kp K      &kp L    &kp SEMI
&kp Z   &kp X   &kp C   &kp V   &kp B   &kp ESC    &kp N   &kp M   &kp COMMA  &kp DOT  &kp SLASH
&trans  &trans  &trans  &trans  &trans             &trans  &trans  &trans     &trans   &trans
            >;
        };

        qwerty_i18n {
            bindings = <
&kp RA(EXCL)   &none        &none         &kp RA(N5)    &kp RA(N9)  &none  &kp RA(Y)  &kp RA(U)  &kp RA(I)      &kp RA(O)  &kp RA(N0)
&kp RA(A)      &kp RA(S)    &kp RA(LBKT)  &kp RA(RBKT)  &none       &none  &none      &kp RA(J)  &none          &ldotl     &ograve
&agrave        &dequot      &kp RA(LBRC)  &kp RA(RBRC)  &none       &none  &none      &egrave    &kp RA(COMMA)  &ldots     &kp RC(SLASH)
&kp RA(GRAVE)  &kp RA(SQT)  &kp RA(DQT)   &none         &kp SPACE          &none      &none      &none          &none      &none
            >;
        };

        qwerty_sym {
            bindings = <
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp SQT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp COLON
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        qwerty_sym {
            if-layers = <5 2>;
            then-layer = <7>;
        };

        qwerty_i18n {
            if-layers = <5 1>;
            then-layer = <6>;
        };
    };
};
