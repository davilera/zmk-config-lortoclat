/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

/ {
    macros {
        ldots: ldots {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N2 &kp N6>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        femord: femord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mascord: mascord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ndash: ndash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N3>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mdash: mdash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N4>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        nbsp: nbsp {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp N0>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        dequot: dequot {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp E>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ldotl: ldotl {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp L &kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp N7>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_tap>,
                <&kp L>;
        };

        ograve: ograve {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp O>;
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp A>;
        };

        egrave: egrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp E>;
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(LS(N0)) &kp SPACE>;
        };

        oumlaut: oumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp O>;

            label = "OUMLAUT";
        };

        aumlaut: aumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp A>;

            label = "AUMLAUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
&kp Y   &kp C   &kp L   &kp M   &kp K      &kp BSPC       &kp Z   &kp F   &kp U      &kp COMMA  &kp SQT
&kp I   &kp S   &kp R   &kp T   &kp G      &kp SEMICOLON  &kp P   &kp N   &kp E      &kp A      &kp O
&kp Q   &kp V   &kp W   &kp D   &kp J      &kp ASTERISK   &kp B   &kp H   &kp SLASH  &kp DOT    &kp X
&kp N1  &kp N2  &kp N3  &kp N4  &kp SPACE                 &kp N5  &kp N6  &kp N7     &kp N8     &kp N9
            >;
        };

        i18n {
            bindings = <
&kp RA(EXCL)   &kp RA(COMMA)     &ldots            &kp RA(N5)     &none      &none  &none      &kp RA(Y)  &kp RA(U)     &kp RA(N9)    &kp RA(N0)
&kp RA(I)      &kp RA(S)         &kp RA(LBKT)      &kp RA(RBKT)   &none      &none  &none      &kp RA(N)  &kp RA(E)     &kp RA(A)     &kp RA(O)
&dequot        &kp RA(LS(LBKT))  &kp LS(RA(RBKT))  &kp RA(COMMA)  &none      &none  &kp RA(Z)  &egrave    &kp RA(LBKT)  &kp RA(RBKT)  &kp RA(J)
&kp RA(GRAVE)  &kp RA(SQT)       &kp RA(DQT)       &none          &kp SPACE         &none      &none      &none         &none         &none
            >;
        };

        sym {
            bindings = <
&kp EXCL   &kp AT     &kp HASH    &kp DOLLAR   &kp PERCENT  &none  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR
&kp COLON  &kp LT     &kp EQUAL   &kp GT       &kp PLUS     &none  &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT  &kp SEMI
&kp GRAVE  &kp TILDE  &kp PIPE    &kp BSLH     &kp UNDER    &none  &kp MINUS  &kp LBKT  &kp RBKT  &kp LBRC   &kp RBRC
&none      &none      &kp INSERT  &kp RS(TAB)  &kp TAB             &none      &none     &none     &none      &none
            >;
        };

        num {
            bindings = <
&none      &none              &none  &none  &none  &none  &kp UNDER  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp MINUS
&kp LSHFT  &kp LA(LG(LCTRL))  &none  &none  &none  &none  &kp STAR   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp PLUS
&none      &none              &none  &none  &none  &none  &kp SPACE  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp SLASH
&to 0      &none              &none  &none  &none         &kp ENTER  &kp KP_N0  &kp DOT    &kp EQUAL  &none
            >;
        };

        sys {
            bindings = <
&sys_reset   &none  &none         &none         &none       &kp C_SLEEP  &none  &none  &none  &none  &none
&none        &none  &kp C_VOL_UP  &kp C_VOL_DN  &none       &kp K_MUTE   &none  &none  &none  &none  &none
&kp C_POWER  &none  &none         &none         &none       &none        &none  &none  &none  &none  &none
&none        &none  &none         &none         &kp C_PLAY               &none  &none  &none  &none  &none
            >;
        };
    };
};
