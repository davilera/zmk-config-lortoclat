/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

/ {
    macros {
        ldots: ldots {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N2 &kp N6>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        femord: femord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mascord: mascord {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp A>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ndash: ndash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N3>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        mdash: mdash {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp N4>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        nbsp: nbsp {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp A &kp N0>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        dequot: dequot {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp N1 &kp E>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>;
        };

        ldotl: ldotl {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp L &kp LC(LS(U))>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp B &kp N7>,
                <&macro_wait_time 20>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_tap>,
                <&kp L>;
        };

        ograve: ograve {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp O>;
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp A>;
        };

        egrave: egrave {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp E>;
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(LS(N0)) &kp SPACE>;
        };

        oumlaut: oumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp O>;

            label = "OUMLAUT";
        };

        aumlaut: aumlaut {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(DQT) &kp A>;

            label = "AUMLAUT";
        };

        ispace: macro_ispace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(I) &kp SPACE>;

            label = "MACRO_ISPACE";
        };

        iapos: iapos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(I) &kp APOS>;

            label = "IAPOS";
        };
    };

    behaviors {
        hkp: hkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HKP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        roh_tap: roh_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "ROH_TAP";
            bindings = <&key_repeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        num {
            bindings = <&mo 4>;
            key-positions = <33 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        regular {
            bindings = <
&hkp N1 Q    &hkp N2 W    &hkp N3 E  &hkp N4 R  &hkp N5 T  &kp BSPC     &hkp N6 Y  &hkp N7 U  &hkp N8 I  &hkp N9 O    &hkp N0 P
&mt LSHFT A  &mt LCTRL S  &lt 3 D    &lt 3 F    &kp G      &key_repeat  &kp H      &lt 3 J    &lt 3 K    &mt RCTRL L  &mt LSHFT SEMI
&kp Z        &kp X        &kp C      &kp V      &kp B      &kp ESC      &kp N      &kp M      &kp COMMA  &kp DOT      &kp FSLH
&mo 5        &kp LGUI     &kp LSHFT  &kp LCTRL  &kp SPACE               &kp ENTER  &kp SQT    &mo 2      &kp LALT     &caps_word
            >;
        };

        gaming {
            bindings = <
&kp Q   &kp W   &kp E   &kp R   &kp T   &trans  &kp Y   &kp U   &kp I      &kp O    &kp P
&kp A   &kp S   &kp D   &kp F   &kp G   &trans  &kp H   &kp J   &kp K      &kp L    &kp SEMI
&kp Z   &kp X   &kp C   &kp V   &kp B   &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans     &trans   &trans
            >;
        };

        i18n {
            bindings = <
&kp RA(EXCL)   &egrave      &kp RA(E)     &kp RA(N5)    &kp RA(N9)  &trans  &kp RA(Y)  &kp RA(U)  &kp RA(I)      &kp RA(O)  &kp RA(N0)
&kp RA(A)      &kp RA(S)    &kp RA(LBRC)  &kp RA(RBRC)  &mascord    &trans  &degree    &kp RA(J)  &ndash         &ldotl     &ograve
&agrave        &dequot      &kp RA(LBKT)  &kp RA(RBKT)  &femord     &trans  &kp RA(N)  &mdash     &kp RA(COMMA)  &ldots     &kp RA(SLASH)
&kp RA(GRAVE)  &kp RA(SQT)  &kp RA(DQT)   &none         &trans              &none      &none      &none          &none      &none
            >;
        };

        sym {
            bindings = <
&kp EXCL   &kp AT    &kp HASH   &kp DOLLAR  &kp PERCENT  &trans  &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR
&kp TILDE  &kp PIPE  &kp MINUS  &kp PLUS    &none        &trans  &none      &kp RBRC   &kp LBRC  &iapos    &kp COLON
&kp GRAVE  &kp BSLH  &kp UNDER  &kp LBKT    &kp RBKT     &trans  &none      &kp EQUAL  &kp LT    &kp GT    &kp QMARK
&none      &none     &none      &none       &trans               &trans     &kp DQT    &none     &none     &none
            >;
        };

        num {
            bindings = <
&mo 5  &none  &none  &none  &none  &trans  &kp EQUAL  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp UNDER
&none  &none  &none  &none  &none  &trans  &kp PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp STAR
&none  &none  &none  &none  &none  &trans  &kp MINUS  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp SLASH
&mo 5  &none  &none  &none  &nbsp          &kp SPACE  &kp KP_N0  &kp DOT    &none      &none
            >;
        };

        fn {
            bindings = <
&kp LA(TAB)  &kp LA(LS(TAB))  &none   &to 0   &kp F5       &kp DEL  &kp LC(LS(C))  &kp LC(TAB)  &kp LS(LC(TAB))  &kp LC(LS(O))  &kp LS(LC(V))
&kp LSHFT    &none            &to 4   &none   &to 1        &trans   &kp LEFT       &kp DOWN     &kp UP           &kp RIGHT      &none
&none        &none            &none   &none   &bootloader  &trans   &kp LC(LS(N))  &kp F12      &none            &none          &kp C_POWER
&none        &trans           &trans  &trans  &trans                &kp TAB        &kp HOME     &kp PG_DN        &kp PG_UP      &kp END
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
